from flask import Flask, request, jsonify
import requests
from datetime import datetime

app = Flask(__name__)

# üîë –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "7713986785:AAGmmLHzw-deWhWP4WZBEDWfzQpDyl4sBr8"
STORMGLASS_API_KEY = "3e99f8b6-dcc3-11ef-acf2-0242ac130003-3e99f9d8-dcc3-11ef-acf2-0242ac130003"

# üìå –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID –≥—Ä—É–ø–ø—ã
ACTIVE_GROUP_ID = -1002055756304  # ID —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã

@app.route('/')
def index():
    """–ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞."""
    return "ü§ñ Telegram bot is running!", 200

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram."""
    data = request.get_json()
    print(f"üì© [LOG] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")

    if "message" in data:
        message = data["message"]
        chat_id = message["chat"]["id"]
        chat_type = message["chat"]["type"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø—ã
        if chat_type in ["group", "supergroup"] and chat_id == ACTIVE_GROUP_ID:
            print(f"‚úÖ [LOG] –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–µ {chat_id}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        if "text" in message and message["text"] == "/start":
            send_message(chat_id, "üëã –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ!", parse_mode="Markdown")
            return jsonify({"status": "ok"}), 200

    return jsonify({"status": "ignored"}), 200


@app.route('/send_forecast', methods=['POST'])
def send_forecast():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –≤ –≥—Ä—É–ø–ø—É."""
    try:
        print(f"üì° [LOG] –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—É—á–µ–Ω. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É: {ACTIVE_GROUP_ID}")

        forecast = get_wave_forecast()

        # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤–æ –í—å–µ—Ç–Ω–∞–º–µ
        current_time = datetime.utcnow()
        viet_hour = (current_time.hour + 7) % 24
        viet_minute = current_time.minute

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å 10:30 –ø–æ –≤—å–µ—Ç–Ω–∞–º—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
        if viet_hour == 10 and viet_minute == 30:
            text = f"üåÖ *–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!*\n\n{forecast}"
        elif viet_hour == 12:
            text = f"üïõ *–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑:*\n\n{forecast}"
        elif viet_hour == 15:
            text = f"üïí *–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑:*\n\n{forecast}"
        else:
            print(f"üö´ [LOG] –°–µ–π—á–∞—Å {viet_hour}:{viet_minute}, –ø—Ä–æ–≥–Ω–æ–∑ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.")
            return jsonify({"message": "No forecast sent at this time"}), 200

        send_message(ACTIVE_GROUP_ID, text, parse_mode="Markdown")

        return jsonify({"message": "Forecast sent successfully!"}), 200

    except Exception as e:
        print(f"‚ùå [LOG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        return jsonify({"error": "Failed to send forecast"}), 500


def get_wave_forecast():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –≤–æ–ª–Ω —Å Stormglass API."""
    try:
        api_url = "https://api.stormglass.io/v2/weather/point"
        params = {
            "lat": 16.0502,
            "lng": 108.2498,
            "params": "waveHeight,wavePeriod,swellHeight,swellPeriod,windSpeed,waterTemperature",
            "source": "sg"
        }
        headers = {"Authorization": STORMGLASS_API_KEY}
        response = requests.get(api_url, params=params, headers=headers)
        response.raise_for_status()
        data = response.json()

        if "hours" not in data or not data["hours"]:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."

        nearest = data["hours"][0]
        wave_height = nearest.get("waveHeight", {}).get("sg", "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        wave_period = nearest.get("wavePeriod", {}).get("sg", "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        swell_height = nearest.get("swellHeight", {}).get("sg", "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        swell_period = nearest.get("swellPeriod", {}).get("sg", "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        wind_speed = nearest.get("windSpeed", {}).get("sg", "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        water_temp = nearest.get("waterTemperature", {}).get("sg", "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

        return (
            f"üåä *–ü—Ä–æ–≥–Ω–æ–∑ –≤–æ–ª–Ω –¥–ª—è My Khe:*\n"
            f"üèÑ –í—ã—Å–æ—Ç–∞ –≤–æ–ª–Ω: *{wave_height} –º*\n"
            f"üìè –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –≤–æ–ª–Ω–∞–º–∏: *{wave_period} —Å–µ–∫*\n"
            f"üåä –í—ã—Å–æ—Ç–∞ —Å–≤–µ–ª–ª–∞: *{swell_height} –º*\n"
            f"‚è≥ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–≤–µ–ª–ª–∞–º–∏: *{swell_period} —Å–µ–∫*\n"
            f"üçÉ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: *{wind_speed} –º/—Å*\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã: *{water_temp}¬∞C*\n"
            f"–ò—Å—Ç–æ—á–Ω–∏–∫: [Stormglass.io](https://stormglass.io)"
        )
    except Exception as e:
        print(f"‚ùå [LOG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


def send_message(chat_id, text, parse_mode=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram."""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {"chat_id": chat_id, "text": text}
        if parse_mode:
            payload["parse_mode"] = parse_mode
        response = requests.post(url, json=payload)
        response.raise_for_status()
        print(f"üì® [LOG] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}: {text}")
    except Exception as e:
        print(f"‚ùå [LOG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# –£–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Vercel
app = app
