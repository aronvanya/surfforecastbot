from flask import Flask, request, jsonify
import requests
from datetime import datetime

app = Flask(__name__)

# üîë –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "7713986785:AAGmmLHzw-deWhWP4WZBEDWfzQpDyl4sBr8"
STORMGLASS_API_KEY = "3e99f8b6-dcc3-11ef-acf2-0242ac130003-3e99f9d8-dcc3-11ef-acf2-0242ac130003"

# üìå –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø (–≤ –ø–∞–º—è—Ç–∏)
active_groups = set()

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram."""
    data = request.get_json()
    print(f"üì© [LOG] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")

    if "message" in data:
        message = data["message"]
        chat_id = message["chat"]["id"]
        chat_type = message["chat"]["type"]

        # –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        if chat_type in ["group", "supergroup"]:
            active_groups.add(chat_id)
            print(f"‚úÖ [LOG] –ì—Ä—É–ø–ø–∞ {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö")

        if "text" in message and message["text"] == "/start":
            send_message(chat_id, "üëã –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ!", parse_mode="Markdown")

    return jsonify({"status": "ok"}), 200

@app.route('/send_forecast', methods=['POST'])
def send_forecast():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –≤ –≥—Ä—É–ø–ø—ã."""
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        update_active_groups()

        if not active_groups:
            print("‚ùå [LOG] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞.")
            return jsonify({"message": "No active groups"}), 200

        # –¢–µ–∫—É—â–µ–µ –≤—å–µ—Ç–Ω–∞–º—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+7)
        current_hour = (datetime.utcnow().hour + 7) % 24
        current_minute = datetime.utcnow().minute

        # ‚úÖ –ü—Ä–æ–º–µ–∂—É—Ç–æ–∫ 5 –º–∏–Ω—É—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8:00‚Äì8:05)
        if (8, 0) <= (current_hour, current_minute) <= (9, 5):
            prefix = "üåÖ *Good Morning Vietnam!*\n\n"
        elif (12, 0) <= (current_hour, current_minute) <= (12, 5):
            prefix = "üïõ *–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑:*\n\n"
        elif (15, 0) <= (current_hour, current_minute) <= (15, 5):
            prefix = "üïí *–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑:*\n\n"
        else:
            print(f"‚è≥ [LOG] –°–µ–π—á–∞—Å {current_hour}:{current_minute}, –ø—Ä–æ–≥–Ω–æ–∑ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.")
            return jsonify({"message": "Not forecast time"}), 200

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        forecast = get_wave_forecast()

        for group_id in active_groups:
            send_message(group_id, f"{prefix}{forecast}", parse_mode="Markdown")

        return jsonify({"message": "Forecast sent"}), 200

    except Exception as e:
        print(f"‚ùå [LOG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        return jsonify({"error": "Failed to send forecast"}), 500

@app.route('/update_groups', methods=['POST'])
def update_groups():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø."""
    update_active_groups()
    return jsonify({"message": "Groups updated"}), 200

def update_active_groups():
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –≥–¥–µ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º."""
    global active_groups
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getUpdates"
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()

        new_groups = set()
        for update in data.get("result", []):
            if "message" in update:
                chat = update["message"]["chat"]
                if chat["type"] in ["group", "supergroup"]:
                    new_groups.add(chat["id"])

        active_groups.update(new_groups)
        print(f"üì° [LOG] –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø: {active_groups}")

    except Exception as e:
        print(f"‚ùå [LOG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø: {e}")

def get_wave_forecast():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –≤–æ–ª–Ω —Å Stormglass API."""
    try:
        api_url = "https://api.stormglass.io/v2/weather/point"
        params = {
            "lat": 16.0502,
            "lng": 108.2498,
            "params": "waveHeight,wavePeriod,swellHeight,swellPeriod,windSpeed,waterTemperature",
            "source": "sg"
        }
        headers = {"Authorization": STORMGLASS_API_KEY}
        response = requests.get(api_url, params=params, headers=headers)
        response.raise_for_status()
        data = response.json()

        if "hours" not in data or not data["hours"]:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."

        nearest = data["hours"][0]
        wave_height = nearest.get("waveHeight", {}).get("sg", "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        wave_period = nearest.get("wavePeriod", {}).get("sg", "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        swell_height = nearest.get("swellHeight", {}).get("sg", "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        swell_period = nearest.get("swellPeriod", {}).get("sg", "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        wind_speed = nearest.get("windSpeed", {}).get("sg", "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        water_temp = nearest.get("waterTemperature", {}).get("sg", "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

        forecast = (
            f"üåä *–ü—Ä–æ–≥–Ω–æ–∑ –≤–æ–ª–Ω –¥–ª—è My Khe:*\n"
            f"üèÑ –í—ã—Å–æ—Ç–∞ –≤–æ–ª–Ω: *{wave_height} –º*\n"
            f"üìè –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –≤–æ–ª–Ω–∞–º–∏: *{wave_period} —Å–µ–∫*\n"
            f"üåä –í—ã—Å–æ—Ç–∞ —Å–≤–µ–ª–ª–∞: *{swell_height} –º*\n"
            f"‚è≥ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–≤–µ–ª–ª–∞–º–∏: *{swell_period} —Å–µ–∫*\n"
            f"üçÉ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: *{wind_speed} –º/—Å*\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã: *{water_temp}¬∞C*\n"
            f"---------------------------\n"
            f"–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: [Stormglass.io](https://stormglass.io)"
        )
        return forecast
    except Exception as e:
        print(f"‚ùå [LOG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def send_message(chat_id, text, parse_mode=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram."""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {"chat_id": chat_id, "text": text}
        if parse_mode:
            payload["parse_mode"] = parse_mode
        response = requests.post(url, json=payload)
        response.raise_for_status()
        print(f"üì® [LOG] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}: {text}")
    except Exception as e:
        print(f"‚ùå [LOG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –£–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Vercel
app = app
