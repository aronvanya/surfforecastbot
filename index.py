from flask import Flask, request, jsonify
import os
import requests
from bs4 import BeautifulSoup

app = Flask(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
SURFLINE_URL = "https://www.surfline.com/surf-report/my-khe/640a5eaa99dd4458250abcf8"

@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.get_json()
    if data and "message" in data:
        chat_id = data["message"]["chat"]["id"]
        text = data["message"].get("text", "")

        if text == "/start":
            send_message(chat_id, (
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤–æ–ª–Ω. üåä\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /forecast, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è My Khe."
            ))
            return jsonify({"message": "Start command processed"}), 200

        if text == "/forecast":
            forecast = get_wave_forecast()
            send_message(chat_id, forecast, parse_mode="Markdown")
            return jsonify({"message": "Forecast command processed"}), 200

        send_message(chat_id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –∏–ª–∏ /forecast.")
        return jsonify({"message": "Unknown command processed"}), 200

    return jsonify({"message": "Webhook received!"}), 200

@app.route('/')
def index():
    return "Server is running", 200

def get_wave_forecast():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –≤–æ–ª–Ω —Å Surfline."""
    try:
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36",
        }
        response = requests.get(SURFLINE_URL, headers=headers)
        response.raise_for_status()

        soup = BeautifulSoup(response.text, "html.parser")

        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ –≤–æ–ª–Ω–∞—Ö
        wave_height = soup.find("span", class_="quiver-surf-height").get_text(strip=True)
        wave_condition = soup.find("span", class_="quiver-spot-conditions-summary__text").get_text(strip=True)

        forecast = f"üåä *–ü—Ä–æ–≥–Ω–æ–∑ –≤–æ–ª–Ω –¥–ª—è My Khe:*\n\n"
        forecast += f"üèÑ –í—ã—Å–æ—Ç–∞ –≤–æ–ª–Ω: *{wave_height}*\n"
        forecast += f"üå§ –£—Å–ª–æ–≤–∏—è: *{wave_condition}*\n\n"
        forecast += f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: [Surfline]({SURFLINE_URL})"

        return forecast
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def send_message(chat_id, text, parse_mode=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    if parse_mode:
        payload["parse_mode"] = parse_mode
    requests.post(url, json=payload)

if __name__ == '__main__':
    app.run(debug=True)
