from flask import Flask, request, jsonify
import requests
import os
from datetime import datetime

app = Flask(__name__)

# üîë –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "7713986785:AAGbL5WZBEDWfzQpDyl4sBr8"
STORMGLASS_API_KEY = "3e99f8b6-dcc3-11ef-acf2-0242ac130003-3e99f9d8-dcc3-11ef-acf2-0242ac130003"

# üìå –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø (–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)
active_groups = set(map(int, os.getenv("ACTIVE_GROUPS", "").split(","))) if os.getenv("ACTIVE_GROUPS") else set()

def save_active_groups():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    os.environ["ACTIVE_GROUPS"] = ",".join(map(str, active_groups))
    print(f"üíæ [LOG] –ì—Ä—É–ø–ø—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {active_groups}")

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram."""
    data = request.get_json()
    print(f"üì© [LOG] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")

    if "message" in data:
        message = data["message"]
        chat_id = message["chat"]["id"]
        chat_type = message["chat"]["type"]

        # –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        if chat_type in ["group", "supergroup"]:
            if chat_id not in active_groups:
                active_groups.add(chat_id)
                save_active_groups()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                print(f"‚úÖ [LOG] –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞: {chat_id}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        if "text" in message and message["text"] == "/start":
            send_message(chat_id, "üëã –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ!", parse_mode="Markdown")
            return jsonify({"status": "ok"}), 200

    return jsonify({"status": "ignored"}), 200


@app.route('/send_forecast', methods=['POST'])
def send_forecast():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –≤ –≥—Ä—É–ø–ø—ã."""
    try:
        print(f"üì° [LOG] –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—É—á–µ–Ω. –ê–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã: {active_groups}")

        if not active_groups:
            print("‚ùå [LOG] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞.")
            return jsonify({"message": "No active groups to send forecast"}), 200

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ UTC-–≤—Ä–µ–º—è –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤–æ –≤—å–µ—Ç–Ω–∞–º—Å–∫–æ–µ
        current_time = datetime.utcnow()
        viet_hour = (current_time.hour + 7) % 24
        viet_minute = current_time.minute

        print(f"‚è≥ [LOG] –í—Ä–µ–º—è —Å–µ–π—á–∞—Å –≤–æ –í—å–µ—Ç–Ω–∞–º–µ: {viet_hour}:{viet_minute}")

        # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –¥–æ–ø—É—Å–∫–æ–º ¬±5 –º–∏–Ω—É—Ç
        forecast_times = [(10, m) for m in range(0, 6)] + \
                         [(12, m) for m in range(0, 6)] + \
                         [(15, m) for m in range(0, 6)]

        if (viet_hour, viet_minute) not in forecast_times:
            print(f"üö´ [LOG] –°–µ–π—á–∞—Å {viet_hour}:{viet_minute}, –ø—Ä–æ–≥–Ω–æ–∑ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.")
            return jsonify({"message": "No forecast sent at this time"}), 200

        print(f"‚úÖ [LOG] –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ {viet_hour}:{viet_minute}!")

        for group_id in active_groups:
            forecast = get_wave_forecast()
            if viet_hour == 10:
                text = f"üåÖ *Good Morning Vietnam!*\n\n{forecast}"
            elif viet_hour == 12:
                text = f"üïõ *–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑:*\n\n{forecast}"
            elif viet_hour == 15:
                text = f"üïí *–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑:*\n\n{forecast}"

            send_message(group_id, text, parse_mode="Markdown")

        return jsonify({"message": "Forecast sent successfully!"}), 200

    except Exception as e:
        print(f"‚ùå [LOG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        return jsonify({"error": "Failed to send forecast"}), 500


@app.route('/')
def index():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞."""
    return "Server is running", 200


def get_wave_forecast():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –≤–æ–ª–Ω —Å Stormglass API."""
    try:
        api_url = "https://api.stormglass.io/v2/weather/point"
        params = {
            "lat": 16.0502,
            "lng": 108.2498,
            "params": "waveHeight,wavePeriod,swellHeight,swellPeriod,windSpeed,waterTemperature",
            "source": "sg"
        }
        headers = {"Authorization": STORMGLASS_API_KEY}
        response = requests.get(api_url, params=params, headers=headers)
        response.raise_for_status()
        data = response.json()

        if "hours" not in data or not data["hours"]:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."

        nearest = data["hours"][0]
        wave_height = nearest.get("waveHeight", {}).get("sg", "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        wave_period = nearest.get("wavePeriod", {}).get("sg", "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        swell_height = nearest.get("swellHeight", {}).get("sg", "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        swell_period = nearest.get("swellPeriod", {}).get("sg", "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        wind_speed = nearest.get("windSpeed", {}).get("sg", "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        water_temp = nearest.get("waterTemperature", {}).get("sg", "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

        forecast = (
            f"üåä *–ü—Ä–æ–≥–Ω–æ–∑ –≤–æ–ª–Ω –¥–ª—è My Khe:*\n"
            f"üèÑ –í—ã—Å–æ—Ç–∞ –≤–æ–ª–Ω: *{wave_height} –º*\n"
            f"üìè –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –≤–æ–ª–Ω–∞–º–∏: *{wave_period} —Å–µ–∫*\n"
            f"üåä –í—ã—Å–æ—Ç–∞ —Å–≤–µ–ª–ª–∞: *{swell_height} –º*\n"
            f"‚è≥ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–≤–µ–ª–ª–∞–º–∏: *{swell_period} —Å–µ–∫*\n"
            f"üçÉ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: *{wind_speed} –º/—Å*\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã: *{water_temp}¬∞C*\n"
            f"---------------------------\n"
            f"–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: [Stormglass.io](https://stormglass.io)"
        )
        return forecast
    except Exception as e:
        print(f"‚ùå [LOG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


def send_message(chat_id, text, parse_mode=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram."""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {"chat_id": chat_id, "text": text}
        if parse_mode:
            payload["parse_mode"] = parse_mode
        response = requests.post(url, json=payload)
        response.raise_for_status()
        print(f"üì® [LOG] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}: {text}")
    except Exception as e:
        print(f"‚ùå [LOG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# –£–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Vercel
app = app
