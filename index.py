from flask import Flask, request, jsonify
import requests
from datetime import datetime

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "7713986785:AAGmmLHzw-deWhWP4WZBEDWfzQpDyl4sBr8"
STORMGLASS_API_KEY = "3e99f8b6-dcc3-11ef-acf2-0242ac130003-3e99f9d8-dcc3-11ef-acf2-0242ac130003"
CHAT_ID = -123456789  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã

@app.route('/send_forecast', methods=['POST'])
def send_forecast():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."""
    try:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ UTC+7 (–≤—å–µ—Ç–Ω–∞–º—Å–∫–æ–µ –≤—Ä–µ–º—è)
        current_hour = (datetime.utcnow().hour + 7) % 24

        # –£—Ç—Ä–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –≤ 8:00
        if current_hour == 8:
            forecast = get_wave_forecast()
            text = f"üåÖ *Good Morning Vietnam –∏ —Ä–µ–±—è—Ç–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã Without Woman!*\n\n{forecast}"
            send_message(CHAT_ID, text, parse_mode="Markdown")
        # –ü—Ä–æ–≥–Ω–æ–∑ –≤ 12:00 –∏ 15:00
        elif current_hour in [12, 15]:
            forecast = get_wave_forecast()
            text = f"üïõ *–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑:*\n\n{forecast}"
            send_message(CHAT_ID, text, parse_mode="Markdown")
        else:
            return jsonify({"message": "No forecast sent at this time"}), 200

        return jsonify({"message": "Forecast sent successfully!"}), 200
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        return jsonify({"error": "Failed to send forecast"}), 500

@app.route('/')
def index():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞."""
    return "Server is running", 200

def get_wave_forecast():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –≤–æ–ª–Ω —Å Stormglass API."""
    try:
        api_url = "https://api.stormglass.io/v2/weather/point"
        params = {
            "lat": 16.0502,
            "lng": 108.2498,
            "params": "waveHeight,windSpeed,windDirection,wavePeriod,waterTemperature,airTemperature",
            "source": "sg"
        }
        headers = {
            "Authorization": STORMGLASS_API_KEY
        }
        response = requests.get(api_url, params=params, headers=headers)
        response.raise_for_status()
        data = response.json()

        if "hours" not in data or not data["hours"]:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."

        nearest = data["hours"][0]
        wave_height = nearest.get("waveHeight", {}).get("sg", "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        wave_period = nearest.get("wavePeriod", {}).get("sg", "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        wind_speed = nearest.get("windSpeed", {}).get("sg", "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        wind_direction = nearest.get("windDirection", {}).get("sg", "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        water_temp = nearest.get("waterTemperature", {}).get("sg", "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        air_temp = nearest.get("airTemperature", {}).get("sg", "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

        forecast = (
            f"üåä *–ü—Ä–æ–≥–Ω–æ–∑ –≤–æ–ª–Ω –¥–ª—è My Khe:*\n\n"
            f"üèÑ –í—ã—Å–æ—Ç–∞ –≤–æ–ª–Ω: *{wave_height} –º*\n"
            f"üìè –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –≤–æ–ª–Ω–∞–º–∏: *{wave_period} —Å–µ–∫*\n"
            f"üçÉ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: *{wind_speed} –º/—Å*\n"
            f"üß≠ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: *{wind_direction}¬∞*\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã: *{water_temp}¬∞C*\n"
            f"üå§ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: *{air_temp}¬∞C*\n\n"
            f"–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: [Stormglass.io](https://stormglass.io)"
        )
        return forecast
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def send_message(chat_id, text, parse_mode=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram."""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {"chat_id": chat_id, "text": text}
        if parse_mode:
            payload["parse_mode"] = parse_mode
        response = requests.post(url, json=payload)
        response.raise_for_status()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –£–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Vercel
handler = app
